import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
//import util.GeneratorUtil

class DAOGeneratorTask extends DefaultTask {
  
	def classMapping = ["INTEGER":"int","TEXT":"String","REAL":"float"]
	def daoPath
	def modelPath
	def csvDir
	def defaultExt = '.csv'
	
  @TaskAction
  def generateClasses() {
		generateModelClasses()
		generateDAOClasses()
		generateFactory()
  }
	
	def generateModelClasses(){
		println "creating DAO models"
		def modelDir = new File(modelPath).mkdirs()
		
		def dir = new File(csvDir)
		dir.eachFileMatch(~/.*?\.csv/){ file -> 
		
			//table name is file name
			def tableName = (file.name - defaultExt).toLowerCase().capitalize()
			
			def declarations = ''
			def constructors = ''
			def gettersAndSetters = ''
			
			File f = new File("${modelPath}/${tableName}.java")
			
			//start writing the script
			f.write("/* Auto-generated by Gradle Build generateClasses task*/")
			f.write("public class ${tableName} {\n\n")
			
			def rows = file.readLines()
			
			//remove first header of csv file
			rows.remove(0)
			
			rows.each{
				declarations += buildDeclaration(it)
				gettersAndSetters += buildGetter(it)
				gettersAndSetters += buildSetter(it)
			}
			
			f.append(declarations)
			f.append(gettersAndSetters)
			f.append("\n}\n\n");
    }
	}
	
	def generateDAOClasses(){
		println "creating DAO classes"
	}
	
	def generateFactory(){
		println "creating DAO factory"
	}
	
	def buildDeclaration(r){
    r = r.tokenize(',')
		def dataType = classMapping."${r[1]}"
		def str = "\tprivate $dataType ${convertToLowerCamelCase(r[0])};\n"
    return str
	}
	
	def buildGetter(r){
    r = r.tokenize(',')
		def dataType = classMapping."${r[1]}"
		def str = "\n\tpublic $dataType get${convertToUpperCamelCase(r[0])}(){\n"
		str += "\t\treturn this.${convertToLowerCamelCase(r[0])};\n"
		str += "\t}\n"
    return str
	}

	def buildSetter(r){
		r = r.tokenize(',')
		def dataType = classMapping."${r[1]}"
		def value = convertToLowerCamelCase(r[0])
		def str = "\n\tpublic void set${convertToUpperCamelCase(r[0])}($dataType $value){\n"
		str += "\t\treturn this.$value = $value;\n"
		str += "\t}\n"
	}
	
	def convertToLowerCamelCase(str){
		str = str.toLowerCase().tokenize('_')
		
		def name = str.remove(0)
		str.each{
			name += it.capitalize()
		}		
		return name
	}
	
	def convertToUpperCamelCase(str){
		str = str.toLowerCase().tokenize('_')
		
		def name = str.remove(0).capitalize()
		str.each{
			name += it.capitalize()
		}		
		return name
	}
}